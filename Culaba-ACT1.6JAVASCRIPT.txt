import * as THREE from 'three';

// Canvas
const canvas = document.querySelector('canvas.webgl');

// Scene
const scene = new THREE.Scene();
scene.background = new THREE.Color('black'); // Set the background color to black

// Object
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 'blue' });
const mesh = new THREE.Mesh(geometry, material);
scene.add(mesh);

// Sizes
const sizes = {
    width: window.innerWidth,
    height: window.innerHeight
};

// Camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height);
camera.position.z = 2;
scene.add(camera);

// Renderer
const renderer = new THREE.WebGLRenderer({
    canvas: canvas
});
renderer.setSize(sizes.width, sizes.height);

// Resize handling
window.addEventListener('resize', () => {
    sizes.width = window.innerWidth;
    sizes.height = window.innerHeight;

    camera.aspect = sizes.width / sizes.height;
    camera.updateProjectionMatrix();

    renderer.setSize(sizes.width, sizes.height);
});

// Prevent scrolling and set full-screen style
document.body.style.margin = '0';
document.body.style.overflow = 'hidden';

// Mouse controls
let isDragging = false;
let previousMousePosition = {
    x: 0,
    y: 0
};

canvas.addEventListener('mousedown', (event) => {
    isDragging = true;
});

canvas.addEventListener('mousemove', (event) => {
    if (isDragging) {
        const deltaX = event.clientX - previousMousePosition.x;
        const deltaY = event.clientY - previousMousePosition.y;

        // Smooth rotation of the cube
        mesh.rotation.y += deltaX * 0.01; //dragging sensitivity
        mesh.rotation.x += deltaY * 0.01;
    }

    previousMousePosition = {
        x: event.clientX,
        y: event.clientY
    };
});

canvas.addEventListener('mouseup', () => {
    isDragging = false;
});

canvas.addEventListener('mouseleave', () => {
    isDragging = false;
});

// Zoom controls
canvas.addEventListener('wheel', (event) => {
    camera.position.z += event.deltaY * 0.001; //zoom sensitivity

    // Clamp the zoom level
    camera.position.z = Math.max(1, Math.min(10, camera.position.z));
});

// Fullscreen on double click
canvas.addEventListener('dblclick', () => {
    if (!document.fullscreenElement) {
        canvas.requestFullscreen().catch((err) => {
            console.error(`Error attempting to enable full-screen mode: ${err.message}`);
        });
    } else {
        document.exitFullscreen().catch((err) => {
            console.error(`Error attempting to exit full-screen mode: ${err.message}`);
        });
    }
});

// Animation loop
const animate = () => {
    // Render the scene
    renderer.render(scene, camera);

    // Request the next frame
    requestAnimationFrame(animate);
};

animate();
